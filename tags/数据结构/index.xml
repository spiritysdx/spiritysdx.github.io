<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>数据结构 - 标签 - 二叉树的博客</title>
        <link>http://www.spiritysdx.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
        <description>数据结构 - 标签 - 二叉树的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 25 Jun 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://www.spiritysdx.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" rel="self" type="application/rss+xml" /><item>
    <title>多重算法实现的迷宫求解问题</title>
    <link>http://www.spiritysdx.top/20210625/</link>
    <pubDate>Fri, 25 Jun 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210625/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<p>感谢组员的共同协作。</p>
<h3 id="题目背景">题目背景</h3>
<p>迷宫问题是取自心理学的一个古典实验。在该实验中，将一只老鼠放入一个无顶大盒子的门口处，在出口处放置一块奶酪，奶酪吸引老鼠在盒子中寻找出口。对同一只老鼠进行反复实验，最终老鼠学会走通迷宫路线并不走错一步。</p>]]></description>
</item><item>
    <title>C&#43;&#43;中序线索二叉链表的建立及遍历</title>
    <link>http://www.spiritysdx.top/20210519/</link>
    <pubDate>Wed, 19 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210519/</guid>
    <description><![CDATA[<h1 id="题目-中序线索二叉链表的建立及遍历数据结构严蔚敏c语言版的c实现">题目 中序线索二叉链表的建立及遍历(数据结构严蔚敏C语言版的C++实现)</h1>
<p>输入：字符串序列</p>
<p>输出：结点的相关信息，中序序列</p>
<p>处理方法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1)在中序遍历过程中修改结点的左、右指针域，以保存当前访问结点的“前驱”和“后继”信息。
</span></span><span class="line"><span class="cl">2)遍历过程中，附设指针pre,  并始终保持指针pre指向当前访问的指针p所指结点的前驱。
</span></span><span class="line"><span class="cl">3)中序线索二叉树结构对称。其中：第一个结点是最左下的结点，最后一个结点是最右下的结点。
</span></span><span class="line"><span class="cl">4)在中序线索二叉树上找结点的(直接)后继/前驱方法：
</span></span><span class="line"><span class="cl">    a)若该结点有右孩子，其后继为其右子树中最左下的结点；
</span></span><span class="line"><span class="cl">    b)若该结点无右孩子，其后继由rchild指向：其后继为满足以下条件的最小子树的根r：该结点为r的左子树中最右下的结点。
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="一问题分析">一、问题分析</h1>
<p>线性链表中指向结点前驱和后继的指针，叫做线索，在线索二叉树上进行遍历，只要先找到序列的第一个结点，然后依次找结点的后继直到结点的后继为空时为止。</p>]]></description>
</item><item>
    <title>C&#43;&#43;二叉树中叶子结点的个数与深度的统计</title>
    <link>http://www.spiritysdx.top/20210517/</link>
    <pubDate>Mon, 17 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210517/</guid>
    <description><![CDATA[<h1 id="题目-统计二叉树中叶子结点的个数计算二叉树的深度数据结构严蔚敏c语言版的c实现">题目 统计二叉树中叶子结点的个数，计算二叉树的深度(数据结构严蔚敏C语言版的C++实现)</h1>
<p>输入：字符串序列</p>
<p>输出：叶子结点的个数，二叉树的深度</p>
<p>处理方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1)先序遍历二叉树。在遍历过程中查找叶子结点，并计数。由此，需在遍历算法中增添一个“计数”的参数，并将算法中“访问结点”的操作改为：若是叶子，则计数器增1。     
</span></span><span class="line"><span class="cl">2)后序遍历二叉树。从二叉树深度的定义可知，二叉树的深度应为其左、右子树深度的最大值加1。由此，先分别求得左、右子树的深度，算法中“访问结点”的操作为：求得左、右子树深度的最大值，然后加 1 。
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="一问题分析">一、问题分析</h1>
<p>统计叶子结点的个数需要先序遍历二叉树，增加计数器和判断语句统计叶子节点数。       <br>
统计二叉树的深度需要后序遍历二叉树，求得左右两子树深度，判断最大值并加一输出。</p>]]></description>
</item><item>
    <title>C&#43;&#43;二叉树的建立</title>
    <link>http://www.spiritysdx.top/20210516/</link>
    <pubDate>Sun, 16 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210516/</guid>
    <description><![CDATA[<h1 id="题目-二叉链表的建立先中后序遍历数据结构严蔚敏c语言版的c实现">题目 二叉链表的建立，先（中、后）序遍历(数据结构严蔚敏C语言版的C++实现)</h1>
<p>输入：字符串序列         <br>
输出：先（中、后）序序列         <br>
处理方法：通过补虚结点，使二叉树中各实际结点均具有左右孩子，再对该二叉树按先序遍历进行输入。以字符串的形式:根、左子树、右子树定义一棵二叉树：</p>]]></description>
</item><item>
    <title>C&#43;&#43;栈结构实现行编辑</title>
    <link>http://www.spiritysdx.top/20210417/</link>
    <pubDate>Sat, 17 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210417/</guid>
    <description><![CDATA[<h1 id="题目-行编辑数据结构严蔚敏c语言版的c实现">题目 行编辑(数据结构严蔚敏C语言版的C++实现)</h1>
<p>输入：一行有误的数据</p>
<p>输出：一行正确的数据</p>
<p>处理方法：           <br>
允许用户输入出差错，并在发现有误时及时更正。例如：可用一个退格符“#”表示前一个字符无效；可用一个退行符“@”表示当前行中的字符均无效。</p>]]></description>
</item><item>
    <title>C&#43;&#43;栈结构实现括号匹配</title>
    <link>http://www.spiritysdx.top/20210415/</link>
    <pubDate>Thu, 15 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210415/</guid>
    <description><![CDATA[<h1 id="题目-括号匹配检验数据结构严蔚敏c语言版的c实现">题目 括号匹配检验(数据结构严蔚敏C语言版的C++实现)</h1>
<p>输入：一串括号</p>
<p>输出：检验结果（缺左括号、有多余左括号、左右不匹配、匹配成功）</p>
<p>处理方法：</p>
<p>检验括号是否匹配的方法可用“期待的急迫程度”这个概念来描述：</p>]]></description>
</item><item>
    <title>C&#43;&#43;栈结构实现进制转换</title>
    <link>http://www.spiritysdx.top/20210414/</link>
    <pubDate>Wed, 14 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210414/</guid>
    <description><![CDATA[<h1 id="题目-数制转换数据结构严蔚敏c语言版的c实现">题目 数制转换(数据结构严蔚敏C语言版的C++实现)</h1>
<p>输入：十进制整数</p>
<p>输出：八进制整数</p>
<p>处理方法：基于下列原理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">N = (N div d)×d + N mod d              
</span></span></code></pre></td></tr></table>
</div>
</div><p>(其中：div为整除运算，mod为求余运算)</p>]]></description>
</item><item>
    <title>C&#43;&#43;单链表尾插法</title>
    <link>http://www.spiritysdx.top/20210413/</link>
    <pubDate>Tue, 13 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210413/</guid>
    <description><![CDATA[<h1 id="题目-尾插法数据结构严蔚敏c语言版的c实现">题目 尾插法(数据结构严蔚敏C语言版的C++实现)</h1>
<p>输入：键盘输入</p>
<p>输出：带头结点的单链表L</p>
<p>处理方法：待插结点*s插入到最后一个结点之后。</p>
<p>步骤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1)获得最后一个结点的位置,使p指向该结点              
</span></span><span class="line"><span class="cl">2)p-&gt;next = new LNode;          
</span></span><span class="line"><span class="cl">3)p = p-&gt;next;              
</span></span><span class="line"><span class="cl">4)cin&gt;&gt;p-&gt;data;             
</span></span><span class="line"><span class="cl">5)p-&gt;next = NULL;           
</span></span></code></pre></td></tr></table>
</div>
</div><p>分析：要想获取最后一个结点的位置，必须从头指针开始顺着next链搜索链表的全部结点，该过程的时间复杂度是O( )。如果每次插入都按此方法获取最后一个结点的位置，则整个创建算法的时间复杂度为O( )。</p>]]></description>
</item><item>
    <title>C&#43;&#43;非递减有序顺序表合并</title>
    <link>http://www.spiritysdx.top/20210412/</link>
    <pubDate>Mon, 12 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210412/</guid>
    <description><![CDATA[<h1 id="题目-按值非递减有序排列表合并数据结构严蔚敏c语言版的c实现">题目 按值非递减有序排列表合并(数据结构严蔚敏C语言版的C++实现)</h1>
<p>已知线性表La和Lb中的数据元素按值非递减有序排列，要求将La和Lb归并成一个新的线性表Lc，且Lc中的数据元素仍按值非递减有序排列。（用顺序表实现）</p>]]></description>
</item><item>
    <title>C&#43;&#43;顺序表合并</title>
    <link>http://www.spiritysdx.top/20210411/</link>
    <pubDate>Sun, 11 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.spiritysdx.top/20210411/</guid>
    <description><![CDATA[<h1 id="题目-c顺序表合并数据结构严蔚敏c语言版的c实现">题目 C++顺序表合并(数据结构严蔚敏C语言版的C++实现)</h1>
<p>求两个线性表La和Lb的并集La = La U Lb （用顺序表实现）</p>
<p>( 要求：“就地运算”，运算结果仍然存放在La中 )</p>]]></description>
</item></channel>
</rss>
